/*************************/
/*   CSP over integers   */
/*     (backtracking)    */
/*    a plug-in module   */
/*    (c) R. Bart½k      */
/*         1996          */
/*************************/

% this is a plug-in module for CSP labelling kernel (CSPkernel.pr)
% it defines constraints eq,neq,lt(less then),gt(greater then),diff(different values
%   diff(ListOfVars)) with all operations that your PROLOG supports (+,-,*,...)
% over integers (domains are finite sets of integers like [1ƒ5,7,9,15ƒ20])
% it uses backtracking so it's not a speedy deamon
% example of usage:
%  ?-labelling([X::[1ƒ10],Y::[1ƒ10]],[lt(X,Y),eq(X+5,Y)],_).

:-op(700,xfx,ƒ).

% no sorting variables
sort_vars(Vs,Vs).

% generate member/test membership in domain
domain_mem(X,[H|T]):-
 	H=(AƒB) -> gen_num(X,A,B)
	          ; X=H.
domain_mem(X,[_|T]):-
 	domain_mem(X,T).

% generate member/test membership in interval
gen_num(A,A,B):-
 	A=<B.
gen_num(X,A,B):-
 	A<B, A1 is A+1,
 	gen_num(X,A1,B).

callable([],_). % only constraint without free variables is callable
finished([],_). % only constraint without free variables is finished

eq([],Vs,Vs,A,B):-
	 CA is A, CB is B, CA=CB.
neq([],Vs,Vs,A,B):-
	 CA is A, CB is B, CA\=CB.
lt([],Vs,Vs,A,B):-
  CA is A, CB is B, CA<CB.
gt([],Vs,Vs,A,B):-
  CA is A, CB is B, CA>CB.
diff([],Vs,Vs,List):-
  diff(List).
diff([H|T]):-
  mem(H,T) -> fail ; diff(T).
diff([]).
